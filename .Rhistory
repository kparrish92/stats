destimate <- groupmean/sampleSD
destimate
pwr.t.test(d=destimate,n=nsubjs[s],sig.level=alphalevel,type="one.sample",alternative='two.sided')
library(pwr)
library(tictoc)
library(plyr)
pwr.t.test(d=destimate,n=nsubjs[s],sig.level=alphalevel,type="one.sample",alternative='two.sided')
s = 1
pwr.t.test(d=destimate,n=nsubjs[s],sig.level=alphalevel,type="one.sample",alternative='two.sided')
food_ratings = data.frame(
subject = c("Kyle"),
pizza_rating = c(9),
doener_rating = c(7)
)
food_ratings = read.csv("food_rating_data.csv")
food_ratings = read.csv("food_rating_data.csv")
food_ratings = read.csv("food_rating_data.csv")
View(food_ratings)
food_ratings = data.frame(
subject = 1:100,
pizza_rating = rnorm(n = 100, mean = 7.5, sd = 2),
doener_rating = rnorm(n = 100, mean = 6, sd = 2)
)
View(food_ratings)
min_value <- 10
max_value <- 50
# Number of integers to generate
n <- 20
# Generate n random integers within the range [min_value, max_value]
random_integers <- sample(min_value:max_value, n, replace = TRUE)
print(random_integers)
min_value
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
min_value <- 10
max_value <- 50
# Generate n random numbers from a normal distribution
random_numbers <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
random_integers <- round(random_numbers)
# Ensure values are within the specified range
random_integers <- pmin(pmax(random_integers, min_value), max_value)
print(random_integers)
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
min_value <- 10
max_value <- 50
# Generate n random numbers from a normal distribution
random_numbers <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
random_integers <- round(random_numbers)
# Ensure values are within the specified range
random_integers <- pmin(pmax(random_integers, min_value), max_value)
print(random_integers)
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
min_value <- 10
max_value <- 50
# Generate n random numbers from a normal distribution
random_numbers <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
random_integers <- round(random_numbers)
# Ensure values are within the specified range
random_integers <- pmin(pmax(random_integers, min_value), max_value)
print(random_integers)
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
min_value <- 10
max_value <- 50
# Generate n random numbers from a normal distribution
random_numbers <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
random_integers <- round(random_numbers)
# Ensure values are within the specified range
random_integers <- pmin(pmax(random_integers, min_value), max_value)
print(random_integers)
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
min_value <- 10
max_value <- 50
# Generate n random numbers from a normal distribution
random_numbers <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
random_integers <- round(random_numbers)
# Ensure values are within the specified range
random_integers <- pmin(pmax(random_integers, min_value), max_value)
print(random_integers)
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
min_value <- 10
max_value <- 50
# Generate n random numbers from a normal distribution
random_numbers <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
random_integers <- round(random_numbers)
# Ensure values are within the specified range
random_integers <- pmin(pmax(random_integers, min_value), max_value)
print(random_integers)
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
min_value <- 10
max_value <- 50
# Generate n random numbers from a normal distribution
random_numbers <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
random_integers <- round(random_numbers)
# Ensure values are within the specified range
random_integers <- pmin(pmax(random_integers, min_value), max_value)
print(random_integers)
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
min_value <- 10
max_value <- 50
# Generate n random numbers from a normal distribution
random_numbers <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
random_integers <- round(random_numbers)
# Ensure values are within the specified range
random_integers <- pmin(pmax(random_integers, min_value), max_value)
print(random_integers)
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
min_value <- 10
max_value <- 50
# Generate n random numbers from a normal distribution
random_numbers <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
random_integers <- round(random_numbers)
# Ensure values are within the specified range
random_integers <- pmin(pmax(random_integers, min_value), max_value)
print(random_integers)
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
min_value <- 10
max_value <- 50
# Generate n random numbers from a normal distribution
random_numbers <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
random_integers <- round(random_numbers)
# Ensure values are within the specified range
random_integers <- pmin(pmax(random_integers, min_value), max_value)
print(random_integers)
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
min_value <- 10
max_value <- 50
# Generate n random numbers from a normal distribution
random_numbers <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
random_integers <- round(random_numbers)
# Ensure values are within the specified range
random_integers <- pmin(pmax(random_integers, min_value), max_value)
print(random_integers)
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
min_value <- 10
max_value <- 50
# Generate n random numbers from a normal distribution
random_numbers <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
random_integers <- round(random_numbers)
# Ensure values are within the specified range
random_integers <- pmin(pmax(random_integers, min_value), max_value)
print(random_integers)
random_integers = function(n, mean_val, sd_val)
{
min_value <- 1
max_value <- 10
# Generate n random numbers from a normal distribution
rns <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
rints <- round(rns)
# Ensure values are within the specified range
ints <- pmin(pmax(rints, min_value), max_value)
}
random_integers(2,2,2)
random_integers
n <- 20        # Number of integers to generate
mean_val <- 30 # Desired mean
sd_val <- 5    # Desired standard deviation
random_integers = function(n, mean_val, sd_val)
{
min_value <- 1
max_value <- 10
# Generate n random numbers from a normal distribution
rns <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
rints <- round(rns)
# Ensure values are within the specified range
ints <- pmin(pmax(rints, min_value), max_value)
return(ints)
}
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
random_integers(2,2,2)
View(food_ratings)
data.frame(n = 100,
pizza_rating = random_integers(n = 100, mean_val = 8,
sd_val = 2,
pizza_rating = random_integers(n = 100, mean_val = 8, sd_val = 2)
data.frame(n = 100,
data.frame(n = 100,
pizza_rating = random_integers(n = 100, mean_val = 8,
sd_val = 2,
pizza_rating = random_integers(n = 100, mean_val = 8, sd_val = 2)
data.frame(n = 100, pizza_rating = random_integers(n = 100, mean_val = 8, sd_val = 2),
data.frame(n = 100, pizza_rating = random_integers(n = 100, mean_val = 8, sd_val = 2),
doener_rating = random_integers(n = 100, mean_val = 5, sd_val = 2)
data.frame(n = 100, pizza_rating = random_integers(n = 100, mean_val = 8, sd_val = 2),
data.frame(n = 100, pizza_rating = random_integers(n = 100, mean_val = 8, sd_val = 2),
doener_rating = random_integers(n = 100, mean_val = 5, sd_val = 2))
data.frame(n = 100, pizza_rating = random_integers(n = 100, mean_val = 8, sd_val = 2),
doener_rating = random_integers(n = 100, mean_val = 5, sd_val = 2))
data.frame(n = 100, pizza_rating = random_integers(n = 100, mean_val = 8, sd_val = 2),
doener_rating = random_integers(n = 100, mean_val = 5, sd_val = 2))
food_ratings = data.frame(n = 100, pizza_rating = random_integers(n = 100, mean_val = 8, sd_val = 2),
doener_rating = random_integers(n = 100, mean_val = 5, sd_val = 2))
food_ratings
# simulated data for now
food_ratings %>%
pivot_longer(cols = 2:3, names_to = food, values_to = rating)
# simulated data for now
food_ratings %>%
pivot_longer(cols = 2:3, names_to = food, values_to = rating)
library(tidyverse)
# simulated data for now
food_ratings %>%
pivot_longer(cols = 2:3, names_to = food, values_to = rating)
# simulated data for now
food_ratings %>%
pivot_longer(cols = 2:3, names_to = food, values_to = rating)
food_ratings %>%
pivot_longer(cols = 2:3, names_to = "food", values_to = "rating")
food_ratings %>%
pivot_longer(cols = 2:3, names_to = "food", values_to = "rating") %>%
mutate(food = str_remove(food, "_rating"))
# simulated data for now
food_ratings %>%
pivot_longer(cols = 2:3, names_to = "food", values_to = "rating") %>%
mutate(food = str_remove(food, "_rating"))
aes(x = rating, y = food, color = food) + geom_boxplot()
food_ratings %>%
pivot_longer(cols = 2:3, names_to = "food", values_to = "rating") %>%
mutate(food = str_remove(food, "_rating")) %>%
ggplot(aes(x = rating, y = food, color = food)) + geom_boxplot()
t.test(food_ratings$pizza_rating, food_ratings$doener_rating)
t.test(food_ratings$pizza_rating, food_ratings$doener_rating, paired = TRUE)
food_ratings %>%
set.seed(123)
set.seed
?set.seed
set.seed(123)
# simulated data for now
food_ratings = data.frame(n = 100, pizza_rating = random_integers(n = 100, mean_val = 8, sd_val = 2),
doener_rating = random_integers(n = 100, mean_val = 5, sd_val = 2))
food_ratings %>%
group_by(food) %>%
food_ratings %>%
group_by(food) %>%
summarize(mean_r = mean(rating), sd_r = sd(rating))
food_ratings %>%
group_by(food) %>%
summarize(mean_r = mean(rating), sd_r = sd(rating))
food_ratings %>%
group_by(food) %>%
summarize(mean_r = mean(rating), sd_r = sd(rating))
food_ratings
food_ratings %>%
pivot_longer(cols = 2:3, names_to = "food", values_to = "rating") %>%
mutate(food = str_remove(food, "_rating")) %>%
group_by(food) %>%
summarize(mean_r = mean(rating), sd_r = sd(rating))
set.seed(123)
# simulated data for now
food_ratings = data.frame(n = 100, pizza_rating = random_integers(n = 100, mean_val = 8, sd_val = 2),
doener_rating = random_integers(n = 100, mean_val = 5, sd_val = 2))
food_ratings %>%
pivot_longer(cols = 2:3, names_to = "food", values_to = "rating") %>%
mutate(food = str_remove(food, "_rating")) %>%
group_by(food) %>%
summarize(mean_r = mean(rating), sd_r = sd(rating))
food_ratings %>%
pivot_longer(cols = 2:3, names_to = "food", values_to = "rating") %>%
mutate(food = str_remove(food, "_rating")) %>%
group_by(food) %>%
summarize(mean_r = mean(rating), sd_r = sd(rating))
t.test(food_ratings$pizza_rating, food_ratings$doener_rating, paired = TRUE)
mean(c(1.92, 1.58))
3.3/1.75
food_ratings %>%
pivot_longer(cols = 2:3, names_to = "food", values_to = "rating") %>%
mutate(food = str_remove(food, "_rating")) %>%
group_by(food) %>%
summarize(mean_r = mean(rating), sd_r = sd(rating))
mean(c(1.91, 1.57 )# effect size
food_ratings %>% # means and sds
food_ratings %>% # means and sds
pivot_longer(cols = 2:3, names_to = "food", values_to = "rating") %>%
mutate(food = str_remove(food, "_rating")) %>%
group_by(food) %>%
summarize(mean_r = mean(rating), sd_r = sd(rating))
mean_difference = 8.06-4.76
pooled_sd = mean(c(1.91, 1.57)# effect size
mean_difference = 8.06-4.76
mean_difference = 8.06-4.76
pooled_sd = mean(c(1.91, 1.57)# effect size
effect_size = mean_difference/pooled_sd
mean_difference = 8.06-4.76
pooled_sd = mean(c(1.91, 1.57))# effect size
effect_size = mean_difference/pooled_sd
effect_size
![Statistical Significance](https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Statistical_Significance.png/320px-Statistical_Significance.png)
![Statistical Significance](https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Statistical_Significance.png/320px-Statistical_Significance.png)
library(tidyverse)
random_integers = function(n, mean_val, sd_val)
{
min_value <- 1
max_value <- 10
# Generate n random numbers from a normal distribution
rns <- rnorm(n, mean = mean_val, sd = sd_val)
# Round to the nearest integer
rints <- round(rns)
# Ensure values are within the specified range
ints <- pmin(pmax(rints, min_value), max_value)
return(ints)
}
food_ratings = data.frame(
subject = c("Kyle"),
pizza_rating = c(9),
doener_rating = c(7)
)
View(food_ratings)
food_ratings = data.frame(
subject = c("Kyle", "Steve"),
pizza_rating = c(9, 4),
doener_rating = c(7, 9)
)
food_ratings = read.csv("food_rating_data.csv")
food_ratings = read.csv("food_rating_data.csv")
food_ratings = read.csv("food_rating_data.csv")
food_ratings = read.csv("food_rating_data.csv")
food_ratings = read.csv("food_rating_data.csv")
food_ratings = read.csv("food_rating_data.csv")
View(food_ratings)
# simulated data for now
food_ratings %>%
pivot_longer(cols = 2:3, names_to = "food", values_to = "rating") %>%
mutate(food = str_remove(food, "_rating")) %>%
ggplot(aes(x = rating, y = food, color = food)) + geom_boxplot()
View(food_ratings)
t.test(food_ratings$pizza_rating, food_ratings$doener_rating, paired = TRUE)
install.packages("devtools")
devtools::install_github("jvcasillas/untidydata")
install.packages("devtools")
untidydata::language_diversity
library(tidyverse)
school_a = data.frame(
score = rnorm(n = 100, mean = 80, sd = 20)
) %>%
mutate(school = "school_a")
school_b = data.frame(
score = rnorm(n = 100, mean = 50, sd = 20)
) %>%
mutate(school = "school_b")
school_data = rbind(school_a, school_b)
library(tidyverse)
school_a = data.frame(
score = rnorm(n = 100, mean = 80, sd = 20)
) %>%
mutate(school = "school_a")
school_b = data.frame(
score = rnorm(n = 100, mean = 50, sd = 40)
) %>%
mutate(school = "school_b")
school_data = rbind(school_a, school_b)
school_data %>%
ggplot(aes(x = school, y = score)) + geom_boxplot()
View(school_data)
school_data %>%
group_by(school) %>%
summarize(mean_score = mean(score))
school_data %>%
group_by(school) %>%
summarize(mean_score = mean(score),
sd_score = sd(score))
school_data %>%
group_by(school) %>%
summarize(mean_score = mean(score),
sd_score = sd(score),
n = n())
View(school_data)
library(tidyverse)
table1
table1 %>%
mutate(rate = cases/population * 10000)
table1 |>
mutate(rate = cases/population * 10000)
table1 |>
mutate(rate = cases/population * 10000)
table1 %>%
mutate(rate = cases/population * 10000) %>%
mutate(table_number = "table_1")
table1 %>%
mutate(rate = cases/population * 10000) %>%
mutate(table_number = "table_1")
table1 |>
group_by(year) |>
summarize(total_cases = sum(cases))
table1 |>
group_by(year) |>
summarize(total_cases = sum(country))
table1 |>
group_by(year) |>
summarize(total_cases = sum(cases))
table1 |>
group_by(country) |>
summarize(total_cases = sum(cases))
table1 |>
group_by(country) |>
summarize(mean_rate = mean(rate))
table1 %>%
mutate(rate = cases/population * 10000) %>%
mutate(table_number = "table_1")
# CMD +shift + M for a pipe
table1 %>%
mutate(rate = cases/population * 10000) %>%
mutate(table_number = "table_1") %>%
group_by(country) |>
summarize(mean_rate = mean(rate))
# CMD +shift + M for a pipe
table1_mutate = table1 %>%
mutate(rate = cases/population * 10000) %>%
mutate(table_number = "table_1")
View(table1_mutate)
ggplot(table1, aes(x = year, y = cases)) +
geom_line(aes(group = country), color = "grey50") +
geom_point(aes(color = country, shape = country)) +
scale_x_continuous(breaks = c(1999, 2000)) # x-axis breaks at 1999 and 2000
billboard
billboard_wide = billboard
View(billboard_wide)
billboard_long = billboard |>
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank"
)
View(billboard_long)
View(billboard_long)
billboard_long = billboard |>
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE
)
View(billboard_long)
billboard_long = billboard |>
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE
) |>
mutate(
week = parse_number(week)
)
cms_patient_experience
glimpse(cms_patient_experience)
install.packages("devtools")
devtools::install_github("jvcasillas/untidydata")
install.packages("devtools")
untidydata::language_diversity
untidydata::vot
vowels = untidydata::spanish_vowels
View(vowels)
View(vowels)
View(vowels)
vowels %>%
ggplot(aes(x = f1, y = f2))
library(tidyverse)
vowels %>%
ggplot(aes(x = f1, y = f2))
vowels %>%
ggplot(aes(x = f1, y = f2)) + geom_point()
vowels %>%
group_by(rep) %>%
summarise(mean_f1 = mean(f1))
